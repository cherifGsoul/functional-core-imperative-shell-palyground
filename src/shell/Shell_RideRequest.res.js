// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Core_Fare from "../core/Core_Fare.res.js";
import * as Core_Route from "../core/Core_Route.res.js";
import * as Core_Street from "../core/Core_Street.res.js";
import * as Core_Address from "../core/Core_Address.res.js";
import * as Core_Distance from "../core/Core_Distance.res.js";
import * as Core_Itinerary from "../core/Core_Itinerary.res.js";
import * as Core_ServedCity from "../core/Core_ServedCity.res.js";
import * as Core_PricedRideRequest from "../core/Core_PricedRideRequest.res.js";

function make(street, city) {
  return {
          street: street,
          city: city
        };
}

function toAddress(requestAddress) {
  var aStreet = Core_Street.fromString(requestAddress.street);
  var street;
  street = aStreet.TAG === "Ok" ? aStreet._0 : Js_exn.raiseError(aStreet._0);
  var aCity = Core_ServedCity.fromString(requestAddress.city);
  var city;
  city = aCity.TAG === "Ok" ? aCity._0 : Js_exn.raiseError(aCity._0);
  return Core_Address.make(street, city);
}

var RequestAddress = {
  make: make,
  toAddress: toAddress
};

var cities = [];

var pricedRides = [];

async function add(city) {
  cities.push(city);
}

async function getCities() {
  return cities;
}

async function addPricedRequest(request) {
  pricedRides.push(request);
}

async function forRoute(route) {
  var aDistance = Core_Distance.fromNumber(20);
  var distance;
  distance = aDistance.TAG === "Ok" ? aDistance._0 : Js_exn.raiseError(aDistance._0);
  return Core_Itinerary.make(route, distance);
}

var Itineraries = {
  forRoute: forRoute
};

function make$1(origin, destination) {
  return {
          origin: origin,
          destination: destination
        };
}

function toRoute(request, servedCities) {
  var origin = toAddress(request.origin);
  var destination = toAddress(request.destination);
  [
      Core_Address.city(origin),
      Core_Address.city(destination)
    ].forEach(function (city) {
        var match = servedCities.find(function (servCity) {
              return Core_ServedCity.equals(servCity, city);
            });
        if (match !== undefined) {
          return ;
        } else {
          return Js_exn.raiseError("Origin and destination cities must be served cities");
        }
      });
  return Core_Route.between(origin, destination);
}

async function handle(request) {
  var servedCities = await getCities();
  var route = toRoute(request, servedCities);
  var itinerary = await forRoute(route);
  var f = Core_Fare.fromNumber(2);
  var farePerKilometer;
  farePerKilometer = f.TAG === "Ok" ? f._0 : Js_exn.raiseError(f._0);
  var f$1 = Core_Fare.fromNumber(5);
  var baseFare;
  baseFare = f$1.TAG === "Ok" ? f$1._0 : Js_exn.raiseError(f$1._0);
  var pricedRide = Core_PricedRideRequest.forItinirary(itinerary, baseFare, farePerKilometer);
  var pricedRide$1;
  pricedRide$1 = pricedRide.TAG === "Ok" ? pricedRide._0 : Js_exn.raiseError(pricedRide._0);
  console.log(pricedRide$1);
  return await addPricedRequest(pricedRide$1);
}

var ServedCity;

var Address;

var Route;

var Itinerary;

var PricedRideRequest;

var DB = {
  add: add,
  getCities: getCities
};

export {
  ServedCity ,
  Address ,
  Route ,
  Itinerary ,
  PricedRideRequest ,
  RequestAddress ,
  DB ,
  Itineraries ,
  make$1 as make,
  handle ,
}
/* No side effect */
